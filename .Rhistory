estim <- estimateNumberOfClustersGivenGraph(fusedAffinity, NUMC=2:5)
plot(estim)
plot(estim)
label <- spectralClustering(fusedAffinity, K_SNF, type = 3) # type refers to the type of spectralClustering, 3 is default !
K_SNF <- 3 # Number of clusters estimated
label <- spectralClustering(fusedAffinity, K_SNF, type = 3) # type refers to the type of spectralClustering, 3 is default !
displayClustersWithHeatmap(fusedAffinity,label)
displayClusters(fusedAffinity,label)
K_SNF <- 4 # Number of clusters estimated
label <- spectralClustering(fusedAffinity, K_SNF, type = 3) # type refers to the type of spectralClustering, 3 is default !
displayClusters(fusedAffinity,label)
K_SNF <- 5 # Number of clusters estimated
label <- spectralClustering(fusedAffinity, K_SNF, type = 3) # type refers to the type of spectralClustering, 3 is default !
displayClusters(fusedAffinity,label)
K_SNF <- 2 # Number of clusters estimated
label <- spectralClustering(fusedAffinity, K_SNF, type = 3) # type refers to the type of spectralClustering, 3 is default !
displayClusters(fusedAffinity,label)
K_SNF <- 3 # Number of clusters estimated
label <- spectralClustering(fusedAffinity, K_SNF, type = 3) # type refers to the type of spectralClustering, 3 is default !
displayClusters(fusedAffinity,label)
Y_PFA <- read.csv("global_sample_spectrum_centralized.csv", header = FALSE)
setwd("~/Documents/Local_Work/Clustering")
Y_PFA <- read.csv("global_sample_spectrum_centralized.csv", header = FALSE)
#set the function:
clustFunc <- kmeans
res <- clusGap(t(Y_PFA), clustFunc, 5, B = 200, d.power = 2, spaceH0 = "scaledPCA")
plot(res)
#set the function:
clustFunc <- kmeans
res <- clusGap(t(Y_PFA), clustFunc, 5, B = 200, d.power = 2, spaceH0 = "scaledPCA")
library(cluster)
res <- clusGap(t(Y_PFA), clustFunc, 5, B = 200, d.power = 2, spaceH0 = "scaledPCA")
plot(res)
print(res)
K_PFA <- 3 # see the print for the good value
#Cluster
result_PFA <- clustFunc(t(Y_PFA), K_PFA)
cluster_PFA <- result_PFA$cluster
forPlot <- data.frame(t(Y_PFA))
ggplot(forPlot) + aes(x=forPlot[,1], y = forPlot[,2]) + geom_point()
library(ggplot2)
ggplot(forPlot) + aes(x=forPlot[,1], y = forPlot[,2]) + geom_point()
source('~/Documents/Local_Work/PFA to R/main_PFA.R', echo=TRUE)
ggplot(forPlot) + aes(x=forPlot[,3], y = forPlot[,2]) + geom_point()
ggplot(forPlot) + aes(x=forPlot[,3], y = forPlot[,4]) + geom_point()
ggplot(forPlot) + aes(x=forPlot[,1], y = forPlot[,2]) + geom_point()
displayClusters(fusedAffinity,label)
label <- spectralClustering(fusedAffinity, K_SNF, type = 2) # type refers to the type of spectralClustering, 3 is default !
displayClusters(fusedAffinity,label)
label <- spectralClustering(fusedAffinity, K_SNF, type = 1) # type refers to the type of spectralClustering, 3 is default !
displayClusters(fusedAffinity,label)
label <- spectralClustering(fusedAffinity, K_SNF, type = 3) # type refers to the type of spectralClustering, 3 is default !
displayClusters(fusedAffinity,label)
label <- spectralClustering(fusedAffinity, K_SNF, type = 3) # type refers to the type of spectralClustering, 3 is default !
displayClusters(fusedAffinity,label)
res <- clusGap(t(Y_PFA), clustFunc, 5, B = 200, d.power = 2, spaceH0 = "scaledPCA")
plot(res)
forPlot <- data.frame(t(Y_PFA))
ggplot(forPlot) + aes(x=forPlot[,1], y = forPlot[,2]) + geom_point()
View(datasets)
source('~/Documents/Local_Work/PFA to R/main_PFA.R', echo=TRUE)
View(Y_PFA)
Y_PFA <- read.csv("global_sample_spectrum_centralized.csv", header = FALSE)
#set the function:
clustFunc <- kmeans
res <- clusGap(t(Y_PFA), clustFunc, 5, B = 200, d.power = 2, spaceH0 = "scaledPCA")
plot(res)
print(res)
#Cluster
result_PFA <- clustFunc(t(Y_PFA), K_PFA)
cluster_PFA <- result_PFA$cluster
forPlot <- data.frame(t(Y_PFA))
ggplot(forPlot) + aes(x=forPlot[,1], y = forPlot[,2]) + geom_point()
View(dist_list)
dist_list[[3]]
View(datasets)
datasets[[3]]
mirna <- datasets[[3]]
View(mirna)
mirna <- datasets[[2]]
View(mirna)
215/10
Knn = 21 #Number of nearest neighboors: N/10 is a good value
alpha = 0.5 #hyperparameter ~  pick it in 0.3 and 0.8 but the method isn't really sensitive to it
t = 30 #number of iterations for the dispersion process
dist_list <- lapply(datasets, function(p) dist2(as.matrix(t(p)),as.matrix(t(p))))
affinityList <- lapply(dist_list, function(dist) affinityMatrix(dist, Knn, alpha ) )
fusedAffinity <- SNF(affinityList, Knn, t)
estim <- estimateNumberOfClustersGivenGraph(fusedAffinity, NUMC=2:5)
dist_list <- lapply(datasets, function(p) dist2(as.matrix(t(p)),as.matrix(t(p))))
affinityList <- lapply(dist_list, function(dist) affinityMatrix(dist, Knn, alpha ) )
fusedAffinity <- SNF(affinityList, Knn, t)
View(datasets)
lapply(datasets, function(data) head.matrix(data))
lapply(datasets, function(data) head.matrix(data, n = 3))
lapply(datasets, function(data) head.matrix(data, n = 1))
lapply(datasets, function(data) head.matrix(data, n = 1)[1:3])
fusedAffinity <- SNF(affinityList, Knn, t)
affinityList <- lapply(affinityList,
zsz
)
affinityList <- lapply(affinityList,
function(affi)
{
affi <- affi[, order(colnames(affi))]
affi <- affi[order(rownames(affi)), ]
return(affi)})
affinityList <- lapply(affinityList,
function(affi)
{
print(order(colnames(affi))[1:5])
affi <- affi[, order(colnames(affi))]
affi <- affi[order(rownames(affi)), ]
return(affi)})
?order
# data import:
listName <- c("Gene","Mirna","Methy")
path.to.data <- "~/Documents/Local_Work/GBM/" #DSI machine
listName <- unlist(lapply(listName, function(p) {return(paste0("GLIO_", p, "_Expression.txt"))}))
datasets <- lapply(listName, function(name) {return(read.table(paste0(path.to.data, name), header = TRUE))})
View(datasets)
#Libraries
library(SNFtool)
#Parameters for SNF
K <- 20
alpha <- 0.5
Tparam <- 10
C <- 3
#Data loading
#path.to.data <- "/home/grom/Documents/Work/DataSets/GBM/" #personnal
path.to.data <- "~/Documents/Local_Work/GBM/" #DSI machine
gene <- read.table(paste0(path.to.data,"GLIO_Gene_Expression.txt"), header = TRUE)
miRNA <- read.table(paste0(path.to.data,"GLIO_Mirna_Expression.txt"), header = TRUE)
methy <- read.table(paste0(path.to.data,"GLIO_Methy_Expression.txt"), header = TRUE)
#Distance matrix
datasets <- list(gene, miRNA, methy)
distCalc <- function(datasets){
distList<-list()
for(data in datasets) {
distance <- list(dist2(t(as.matrix(data)), t(as.matrix(data))))
distList<- append(distList, distance)
}
return(distList)
}
distList <- distCalc(datasets)
#Affinity matrix
i <- 1
for (dist in distList){
assign(paste("W",i,sep=""), affinityMatrix(dist, K, alpha))
i <- i + 1
}
q <- 215 %/% C
r <- 215 %% C
truelabelsRandom <- c()
for (i in 1:C) {
if(i == C) {
truelabelsRandom <- c(truelabelsRandom,c(matrix(i,1,q+r)))
}else{
truelabelsRandom <- c(truelabelsRandom,c(matrix(i,1,q)))
}
}
displayClusters(W3,truelabelsRandom)
displayClusters(W2,truelabelsRandom)
displayClusters(W1,truelabelsRandom)
W <- SNF(list(W1,W2,W3), K, Tparam)
group = spectralClustering(W, C)
displayClusters(W, group)
library("CancerSubtypes")
executeSNF.results <- ExecuteSNF(datasets, C, K, alpha, Tparam)
distance <- function(A,B) {
res <- c()
for (ntype in c("O", "I", "F", "M", "2")) {
res <- c(res, norm(B-A, type = ntype))
}
return(res)
}
distance(executeSNF.results$distanceMatrix, W)
norm(W)
norm(executeSNF.results$distanceMatrix)
diff <- W - executeSNF.results$distanceMatrix
diff[1:5,1:5]
diff[91:95,91:95]
diag.mine <- diag(W)
diag.Execute <- diag(executeSNF.results$distanceMatrix)
diag.Execute[1:5]
diag.mine[1:5]
cList <- 2:4
groupList <- c()
for (C in cList) {
group.temp <- spectralClustering(W, C)
displayClusters(W,group.temp)
}
group
colname(gene)
colnames(gene)
colnames(gene) in colnames(methy)
bool <- vector('list',215)
for (x in colnames(gene)) {
if (x in colnames(methy)) {
bool[[i]] <- 1
} else {
bool[[i]] <- 0
}
}
sum(bool)
colnames(gene) in colnames(methy)
?in
?in
for (x in colnames(gene)) {
if (x %in% colnames(methy)) {
bool[[i]] <- 1
} else {
bool[[i]] <- 0
}
}
sum(bool)
##TEST
bool <- vector('integer',215)
for (x in colnames(gene)) {
if (x %in% colnames(methy)) {
bool[[i]] <- 1
} else {
bool[[i]] <- 0
}
}
sum(bool)
View(gene)
for (x in as.character(colnames(gene))) {
if (x %in% as.character(colnames(methy))) {
bool[[i]] <- 1
} else {
bool[[i]] <- 0
}
}
sum(bool)
as.character(colnames(methy)
as.character(colnames(methy)
)
as.character(colnames(methy))
patMethy %in% as.character(colnames(gene))
patMethy <- "TCGA.02.0001.01C.01D.0186.05"
patMethy %in% as.character(colnames(gene))
survival <- read.table(paste0(path.to.data, name), header = TRUE)
survival <- read.table(paste0(path.to.data, "Survival.txt"), header = TRUE)
survival <- read.table(paste0(path.to.data, "GLIO_Survival.txt"), header = TRUE)
View(methy)
IDFromSurvival <- unique(survival$PatientID)
IDFromSurvival <- unique(as.character(survival$PatientID))
# data import:
cancerTypeName = "BREAST_"
# data import:
cancerTypeName = "BREAST_"
listName <- c("Gene","Mirna","Methy")
path.to.data <- "~/Documents/Local_Work/GBM/" #DSI machine
listName <- unlist(lapply(listName, function(p) {return(paste0(cancerTypeName, p, "_Expression.txt"))}))
datasets <- lapply(listName, function(name) {return(read.table(paste0(path.to.data, name), header = TRUE))})
path.to.data <- "~/Documents/Local_Work/Clustering/" #DSI machine
listName <- unlist(lapply(listName, function(p) {return(paste0(cancerTypeName, p, "_Expression.txt"))}))
datasets <- lapply(listName, function(name) {return(read.table(paste0(path.to.data, name), header = TRUE))})
path.to.data <- "~/Documents/Local_Work/PFA to R/" #DSI machine
listName <- unlist(lapply(listName, function(p) {return(paste0(cancerTypeName, p, "_Expression.txt"))}))
datasets <- lapply(listName, function(name) {return(read.table(paste0(path.to.data, name), header = TRUE))})
setwd("~/Documents/Local_Work/PFA to R")
# data import:
cancerTypeName = "BREAST_"
listName <- c("Gene","Mirna","Methy")
path.to.data <- "~/Documents/Local_Work/PFA to R/" #DSI machine
listName <- unlist(lapply(listName, function(p) {return(paste0(cancerTypeName, p, "_Expression.txt"))}))
datasets <- lapply(listName, function(name) {return(read.table(paste0(path.to.data, name), header = TRUE))})
# data import:
cancerTypeName = "GLIO_"
listName <- c("Gene","Mirna","Methy")
path.to.data <- "~/Documents/Local_Work/PFA to R/TestData/" #DSI machine
listName <- unlist(lapply(listName, function(p) {return(paste0(cancerTypeName, p, "_Expression.txt"))}))
datasets <- lapply(listName, function(name) {return(read.table(paste0(path.to.data, name), header = TRUE))})
names <- unlist(1:215, function(int) {return(paste0("patient_",int))})
names <- unlist(laaply(1:215, function(int) {return(paste0("patient_",int))}))
names <- unlist(lapply(1:215, function(int) {return(paste0("patient_",int))}))
datasets <- lapply(datasets, function(data) {colnames(data) <- PatientIDs})
datasets <- lapply(datasets, function(data,PatientIDs) {colnames(data) <- PatientIDs})
patientIDs <- unlist(lapply(1:215, function(int) {return(paste0("patient_",int))}))
A <- function(data, pID) {colnames(data) <- pID}
datasets <- lapply(datasets, function(data) A(data, patientIDs))
View(datasets)
Knn = 21 #Number of nearest neighboors: N/10 is a good value
alpha = 0.5 #hyperparameter ~  pick it in 0.3 and 0.8 but the method isn't really sensitive to it
t = 30 #number of iterations for the dispersion process
dist_list <- lapply(datasets, function(p) dist2(as.matrix(t(p)),as.matrix(t(p))))
affinityList <- lapply(dist_list, function(dist) affinityMatrix(dist, Knn, alpha ) )
dist_list <- lapply(datasets, function(p) dist2(as.matrix(t(p)),as.matrix(t(p))))
A <- function(data, pID) {colnames(data) <- pID;return(data)}
datasets <- lapply(datasets, function(data) A(data, patientIDs))
Knn = 21 #Number of nearest neighboors: N/10 is a good value
datasets <- lapply(listName, function(name) {return(read.table(paste0(path.to.data, name), header = TRUE))})
A <- function(data, pID) {colnames(data) <- pID;return(data)}
datasets <- lapply(datasets, function(data) A(data, patientIDs))
Knn = 21 #Number of nearest neighboors: N/10 is a good value
alpha = 0.5 #hyperparameter ~  pick it in 0.3 and 0.8 but the method isn't really sensitive to it
t = 30 #number of iterations for the dispersion process
dist_list <- lapply(datasets, function(p) dist2(as.matrix(t(p)),as.matrix(t(p))))
affinityList <- lapply(dist_list, function(dist) affinityMatrix(dist, Knn, alpha ) )
affinityList <- lapply(affinityList,
function(affi)
{
print(order(colnames(affi))[1:5])
affi <- affi[, order(colnames(affi))]
affi <- affi[order(rownames(affi)), ]
return(affi)})
A <- function(data, pID) {colnames(data) <- pID;return(data)}
datasets <- lapply(datasets, function(data) A(data, 1:215))
dist_list <- lapply(datasets, function(p) dist2(as.matrix(t(p)),as.matrix(t(p))))
affinityList <- lapply(dist_list, function(dist) affinityMatrix(dist, Knn, alpha ) )
affinityList <- lapply(affinityList,
function(affi)
{
print(order(colnames(affi))[1:5])
affi <- affi[, order(colnames(affi))]
affi <- affi[order(rownames(affi)), ]
return(affi)})
fusedAffinity <- SNF(affinityList, Knn, t)
affinityList <- lapply(affinityList,
function(affi)
{
print(order(colnames(affi))[1:5])
affi <- affi[, order(colnames(affi))]
affi <- affi[order(rownames(affi)), ]
print(order(colnames(affi))[1:5])
return(affi)})
affinityList <- lapply(dist_list, function(dist) affinityMatrix(dist, Knn, alpha ) )
affinityList <- lapply(affinityList,
function(affi)
{
print(order(colnames(affi)))
# affi <- affi[, order(colnames(affi))]
# affi <- affi[order(rownames(affi)), ]
return(affi)})
orderMatrix <- function(affi) {
#print(order(colnames(affi)))
affi <- affi[, order(colnames(affi))]
affi <- affi[order(rownames(affi)), ]
}
fusedAffinity <- SNF(affinityList, Knn, t)
orderMatrix(fusedAffinity)
View(fusedAffinity)
fusedAffinity <- SNF(affinityList, Knn, t)
View(fusedAffinity)
LETTERS
pID = 10*(1:215)
pID = 10*(1:215)
A <- function(data, pID) {colnames(data) <- pID;return(data)}
datasets <- lapply(datasets, function(data) A(data, pID))
Knn = 21 #Number of nearest neighboors: N/10 is a good value
alpha = 0.5 #hyperparameter ~  pick it in 0.3 and 0.8 but the method isn't really sensitive to it
t = 30 #number of iterations for the dispersion process
dist_list <- lapply(datasets, function(p) dist2(as.matrix(t(p)),as.matrix(t(p))))
affinityList <- lapply(dist_list, function(dist) affinityMatrix(dist, Knn, alpha ) )
fusedAffinity <- SNF(affinityList, Knn, t)
View(fusedAffinity)
orderMatrix <- function(affi) {
#print(order(colnames(affi)))
affi <- affi[, order(colnames(affi))]
affi <- affi[order(rownames(affi)), ]
}
orderMatrix(fusedAffinity)
View(fusedAffinity)
pID = lapply((1:215), function(p) {return(paste0("patient_",p))} #to have a different name than default !
pID = lapply((1:215), function(p) {return(paste0("patient_",p))} #to have a different name than default !
pID = lapply((1:215), function(p) {return(paste0("patient_",p))}) #to have a different name than default !
pID = unlist(lapply((1:215), function(p) {return(paste0("patient_",p))})) #to have a different name than default !
A <- function(data, pID) {colnames(data) <- pID;return(data)}
datasets <- lapply(datasets, function(data) A(data, pID))
Knn = 21 #Number of nearest neighboors: N/10 is a good value
alpha = 0.5 #hyperparameter ~  pick it in 0.3 and 0.8 but the method isn't really sensitive to it
t = 30 #number of iterations for the dispersion process
dist_list <- lapply(datasets, function(p) dist2(as.matrix(t(p)),as.matrix(t(p))))
affinityList <- lapply(dist_list, function(dist) affinityMatrix(dist, Knn, alpha ) )
fusedAffinity <- SNF(affinityList, Knn, t)
View(fusedAffinity)
estim <- estimateNumberOfClustersGivenGraph(fusedAffinity, NUMC=2:5)
source('~/Documents/Local_Work/PFA to R/main_PFA.R', echo=TRUE)
setwd("~/Documents/Local_Work/PFA to R")
source('~/Documents/Local_Work/PFA to R/main_PFA.R', echo=TRUE)
source('~/Documents/Local_Work/PFA to R/main_PFA.R', echo=TRUE)
source('~/Documents/Local_Work/PFA to R/main_PFA.R', echo=TRUE)
showNames <- function(dataMatrix,stepName) {
print(paste0("Order of patient at step :",stepName))
print(colnames(dataMatrix)[1:3])
}
source("PFA_algorithm_v2.R")
Y_PFA <- algorithm_4(X_list, lambda, iterMax)
source("PFA_algorithm_v2.R")
Y_PFA <- algorithm_4(X_list, lambda, iterMax)
source("PFA_algorithm_v2.R")
Y_PFA <- algorithm_4(X_list, lambda, iterMax)
source("PFA_algorithm_v2.R")
Y_PFA <- algorithm_4(X_list, lambda, iterMax)
source("PFA_algorithm_v2.R")
Y_PFA <- algorithm_4(X_list, lambda, iterMax)
View(Y_PFA)
label <- spectralClustering(fusedAffinity, K_SNF, type = 3) # type refers to the type of spectralClustering, 3 is default !
K_SNF <- 3 # Number of clusters estimated
label <- spectralClustering(fusedAffinity, K_SNF, type = 3) # type refers to the type of spectralClustering, 3 is default !
calNMI(label,cluster_PFA)
source('~/Documents/Local_Work/Clustering/clustering.R', echo=TRUE)
Knn = 21 #Number of nearest neighboors: N/10 is a good value
alpha = 0.6 #hyperparameter ~  pick it in 0.3 and 0.8 but the method isn't really sensitive to it
t = 20 #number of iterations for the dispersion process
affinityList <- lapply(dist_list, function(dist) affinityMatrix(dist, Knn, alpha ) )
fusedAffinity <- SNF(affinityList, Knn, t)
estim <- estimateNumberOfClustersGivenGraph(fusedAffinity, NUMC=2:5)
K_SNF <- 3 # Number of clusters estimated
alpha = 0.3 #hyperparameter ~  pick it in 0.3 and 0.8 but the method isn't really sensitive to it
affinityList <- lapply(dist_list, function(dist) affinityMatrix(dist, Knn, alpha ) )
fusedAffinity <- SNF(affinityList, Knn, t)
estim <- estimateNumberOfClustersGivenGraph(fusedAffinity, NUMC=2:5)
K_SNF <- 3 # Number of clusters estimated
label <- spectralClustering(fusedAffinity, K_SNF, type = 3) # type refers to the type of spectralClustering, 3 is default !
displayClusters(fusedAffinity,label)
calNMI(label,cluster_PFA)
alpha = 0.2 #hyperparameter ~  pick it in 0.3 and 0.8 but the method isn't really sensitive to it
t = 20 #number of iterations for the dispersion process
dist_list <- lapply(datasets, function(p) dist2(as.matrix(t(p)),as.matrix(t(p))))
affinityList <- lapply(dist_list, function(dist) affinityMatrix(dist, Knn, alpha ) )
fusedAffinity <- SNF(affinityList, Knn, t)
estim <- estimateNumberOfClustersGivenGraph(fusedAffinity, NUMC=2:5)
K_SNF <- 3 # Number of clusters estimated
label <- spectralClustering(fusedAffinity, K_SNF, type = 3) # type refers to the type of spectralClustering, 3 is default !
displayClusters(fusedAffinity,label)
calNMI(label,cluster_PFA)
eq(1:10)
eqscplot(1:10)
NMIList <- vector('numeric',8)
for (i in 1:8) {
val <- 0.1*(3:10)
NMIList[[i]] <- parametersImpact(datasets, Knn, val[i], t)
}
plot(NMIList)
NMIList
for (i in 1:8) {
val <- 0.1*(3:10)
NMIList[[i]] <- parametersImpact(datasets, Knn, val[i], t)
}
parametersImpact <- function(datasets, Knn, alpha, t) {
# apply SNF to get the fused affinity matrix:
dist_list <- lapply(datasets, function(p) dist2(as.matrix(t(p)),as.matrix(t(p))))
affinityList <- lapply(dist_list, function(dist) affinityMatrix(dist, Knn, alpha ) )
fusedAffinity <- SNF(affinityList, Knn, t)
estim <- estimateNumberOfClustersGivenGraph(fusedAffinity, NUMC=2:5)
#Cluster
K_SNF <- 3 # Number of clusters estimated
label <- spectralClustering(fusedAffinity, K_SNF, type = 3) # type refers to the type of spectralClustering, 3 is default !
displayClusters(fusedAffinity,label)
return(calNMI(label,cluster_PFA))
}
NMIList <- vector('numeric',8)
for (i in 1:8) {
val <- 0.1*(3:10)
NMIList[[i]] <- parametersImpact(datasets, Knn, val[i], t)
}
NMIList
parametersImpact <- function(datasets, Knn, alpha, t) {
# apply SNF to get the fused affinity matrix:
dist_list <- lapply(datasets, function(p) dist2(as.matrix(t(p)),as.matrix(t(p))))
affinityList <- lapply(dist_list, function(dist) affinityMatrix(dist, Knn, alpha ) )
fusedAffinity <- SNF(affinityList, Knn, t)
#estim <- estimateNumberOfClustersGivenGraph(fusedAffinity, NUMC=2:5)
#Cluster
K_SNF <- 3 # Number of clusters estimated
label <- spectralClustering(fusedAffinity, K_SNF, type = 3) # type refers to the type of spectralClustering, 3 is default !
#displayClusters(fusedAffinity,label)
return(calNMI(label,cluster_PFA))
}
NMIList <- vector('numeric',8)
for (i in 1:8) {
val <- 0.1*(3:10)
NMIList[[i]] <- parametersImpact(datasets, Knn, val[i], t)
}
NMIList
Knn = 5 #Number of nearest neighboors: N/10 is a good value
parametersImpact <- function(datasets, Knn, alpha, t) {
# apply SNF to get the fused affinity matrix:
dist_list <- lapply(datasets, function(p) dist2(as.matrix(t(p)),as.matrix(t(p))))
affinityList <- lapply(dist_list, function(dist) affinityMatrix(dist, Knn, alpha ) )
fusedAffinity <- SNF(affinityList, Knn, t)
#estim <- estimateNumberOfClustersGivenGraph(fusedAffinity, NUMC=2:5)
#Cluster
K_SNF <- 3 # Number of clusters estimated
label <- spectralClustering(fusedAffinity, K_SNF, type = 3) # type refers to the type of spectralClustering, 3 is default !
#displayClusters(fusedAffinity,label)
return(calNMI(label,cluster_PFA))
}
NMIList <- vector('numeric',8)
for (i in 1:8) {
val <- 0.1*(3:10)
NMIList[[i]] <- parametersImpact(datasets, Knn, val[i], t)
}
NMIList
NMIList <- vector('numeric',15)
for (i in 1:15) {
val <- 0.1*(3:10)
Kval <- 5:20
NMIList[[i]] <- parametersImpact(datasets, Kval[[i]], 0.3, t)
}
NMIList
for (i in 1:15) {
val <- 0.1*(3:10)
Kval <- 5:20
NMIList[[i]] <- parametersImpact(datasets, Kval[[i]], 0.7, t)
}
NMIList#bad
mean(NMIList)#bad
max(NMIList)
